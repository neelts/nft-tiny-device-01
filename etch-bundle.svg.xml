<svg width="1024" height="1024" viewBox="0 0 1024 1024" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g id="etch">
    <g id="device">
      <rect id="body" x="194" y="132" width="624" height="782" rx="94" fill="black" stroke="white" stroke-width="4"/>
      <rect id="front" x="194" y="98" width="624" height="784" rx="94" fill="black" stroke="white" stroke-width="4"/>
      <rect id="screen" opacity="0.7" x="226" y="130" width="560" height="562" rx="62" fill="black" stroke="white" stroke-width="4"/>
      <path id="neelts" fill-rule="evenodd" clip-rule="evenodd" d="M662 893H659V902H662V896H665V902H668V893H665H662ZM671 893H680V896H671V893ZM695 893H698V899H704V902H695V899V893ZM692 893H683V896H692V893ZM718 893H724V896H718V893ZM714 893H705V896H708V902H711V896H714V893ZM671 899H680V902H671V899ZM692 899H683V902H692V899ZM721 899V902H715V899H721Z" fill="white"/>
      <g id="canvas">
        <rect x="255" y="159" width="502" height="502" stroke="white" stroke-opacity="0.2" stroke-width="2"/>
      </g>
      <g id="leftKnobHolder">
        <g id="leftKnobBody">
          <mask id="path-7-inside-1" fill="white">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M352 772C352 736.654 323.346 708 288 708C252.654 708 224 736.654 224 772V788C224 823.346 252.654 852 288 852C323.346 852 352 823.346 352 788V772Z"/>
          </mask>
          <path d="M288 710C322.242 710 350 737.758 350 772H354C354 735.549 324.451 706 288 706V710ZM226 772C226 737.758 253.758 710 288 710V706C251.549 706 222 735.549 222 772H226ZM222 772V788H226V772H222ZM222 788C222 824.451 251.549 854 288 854V850C253.758 850 226 822.242 226 788H222ZM288 854C324.451 854 354 824.451 354 788H350C350 822.242 322.242 850 288 850V854ZM354 788V772H350V788H354Z" fill="white" mask="url(#path-7-inside-1)"/>
        </g>
        <g id="leftKnob">
          <circle id="leftKnobCircle" cx="288" cy="772" r="63" stroke="white" stroke-width="2"/>
          <circle id="leftKnobPin" cx="288" cy="732" r="9" stroke="white" stroke-width="2"/>
        </g>
      </g>
      <g id="rightKnobHolder">
        <g id="rightKnobBody">
          <mask id="path-11-inside-2" fill="white">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M788 772C788 736.654 759.346 708 724 708C688.654 708 660 736.654 660 772V788C660 823.346 688.654 852 724 852C759.346 852 788 823.346 788 788V772Z"/>
          </mask>
          <path d="M724 710C758.242 710 786 737.758 786 772H790C790 735.549 760.451 706 724 706V710ZM662 772C662 737.758 689.758 710 724 710V706C687.549 706 658 735.549 658 772H662ZM658 772V788H662V772H658ZM658 788C658 824.451 687.549 854 724 854V850C689.758 850 662 822.242 662 788H658ZM724 854C760.451 854 790 824.451 790 788H786C786 822.242 758.242 850 724 850V854ZM790 788V772H786V788H790Z" fill="white" mask="url(#path-11-inside-2)"/>
        </g>
        <g id="rightKnob_2">
          <circle id="rightKnobCircle" cx="724" cy="772" r="63" stroke="white" stroke-width="2"/>
          <circle id="rightKnobPin" cx="724" cy="732" r="9" stroke="white" stroke-width="2"/>
        </g>
        <circle id="rightKnob" cx="724" cy="772" r="63" stroke="white" stroke-width="2"/>
      </g>
    </g>
  </g>
  <script><![CDATA[
// <SVGS version="1.0.0" />
/**
 * 	Interactive $Tezos #OBJKT #NFT by @neelts built for @hicetnunc
 * 	How to draw:
 * 		- Send 0.00XXYY to $account to set next point (XX & YY - int 01-99)
 * 		- Send 0.010000 to clear current drawings
 *
 */
var SVG = "http://www.w3.org/2000/svg";
var api = 'https://api.tzkt.io/v1/';
var account = 'tz1hadV1B3jiey6xiUVgfdSPKwSdaMEUMmd9';
var speed = 1;
var transactions = function (resolve, reject, limit, lastId) {
    if (limit === void 0) { limit = 100; }
    var r = new XMLHttpRequest();
    r.open('get', api + "accounts/" + account + "/operations?type=transaction&limit=" + limit + (lastId ? '&lastId=' + lastId : '') + "&target=" + account);
    r.setRequestHeader('Cache-Control', 'no-cache');
    r.onload = function (_) { return resolve(JSON.parse(r.responseText)); };
    r.onerror = reject;
    r.ontimeout = reject;
    r.onabort = reject;
    r.send();
};
var get = function (id) {
    return document.getElementById(id);
};
var tag = function (node, name) { return node.getElementsByTagName(name)[0]; };
var base = function (v) { return v.baseVal.value; };
var create = function (name) { return document.createElementNS(SVG, name); };
var intAttribute = function (node, name) { return parseInt(node.getAttribute(name)); };
var setAttributes = function (node, attr) { return attr.forEach(function (_a) {
    var name = _a[0], value = _a[1];
    return node.setAttribute(name, value);
}); };
var xy = function (node, x, y) { return node.setAttribute('transform', "translate(" + x + ", " + y + ")"); };
var clamp = function (value) { return value < 0 ? 0 : (value > 1 ? 1 : value); };
var root = document.firstChild;
root.style.width = root.style.height = '100%';
var etch = get('etch');
var device = get('device');
var holder = create('g');
var back = tag(device, 'rect');
var bx = base(back.x);
var by = base(back.y);
var hx = bx + base(back.width) * .5;
var hy = by + base(back.height) * .5;
xy(holder, hx, hy);
xy(device, -hx, -hy);
holder.appendChild(device);
etch.appendChild(holder);
var canvas = get('canvas');
var bounds = tag(canvas, 'rect');
var cs = intAttribute(bounds, 'stroke-width') * .5;
var sc = Math.round((bounds.width.baseVal.value - cs) * .01);
var shakePower = 4;
var shakePoints = 10;
var shakeDuration = 0.3;
var shake = function (handler) {
    var animate = create('animateMotion');
    var shakeFrames = [];
    var total = (Math.random() * shakePoints) + shakePoints;
    for (var i = 0; i < total; i++)
        shakeFrames.push([
            Math.round(Math.random() * shakePower) - shakePower * .5,
            Math.round(Math.random() * shakePower) - shakePower * .5
        ]);
    var sd = shakeDuration / speed;
    setAttributes(animate, [
        ['dur', sd + "s"],
        ['repeatCount', 'indefinite'],
        ['path', "M 0,0" + shakeFrames.map(function (_a) {
                var x = _a[0], y = _a[1];
                return "L " + x * 2 + "," + y * 2;
            }).join('') + "M 0,0"]
    ]);
    holder.appendChild(animate);
    setTimeout(function () {
        holder.removeChild(animate);
        if (handler)
            setTimeout(handler, 500 / speed);
    }, sd * 1000);
};
var ActionType;
(function (ActionType) {
    ActionType[ActionType["Draw"] = 0] = "Draw";
    ActionType[ActionType["Shake"] = 1] = "Shake";
    ActionType[ActionType["Restart"] = 2] = "Restart";
})(ActionType || (ActionType = {}));
var limit = 100;
var executing = false;
var actions = [];
var segments = [];
var ShakeAmount = 10000;
function fillActions(data) {
    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {
        var action = null;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var op = data_1[_i];
            var x = Math.floor(op.amount * .01);
            var y = op.amount - x * 100;
            if (x > 0 && x < 100 && y > 0 && y < 100) {
                if (!action) {
                    action = { type: ActionType.Draw, points: [] };
                    actions.push(action);
                }
                action.points.push([x, y]);
            }
            else if (op.amount == ShakeAmount && actions.length > 0) {
                actions.push({ type: ActionType.Shake });
                action = null;
            }
        }
        var last = data[data.length - 1];
        transactions(fillActions, function (e) {
            console.log(e);
            fillActions();
        }, limit, last.id);
    }
    else {
        actions.push({ type: ActionType.Restart });
    }
    executeAction();
}
function shakeAndReset(delay, handler) {
    setTimeout(function () {
        if (segments.length > 0) {
            segments.forEach(function (polyline) {
                canvas.removeChild(polyline);
            });
            segments = [];
        }
        shake(handler);
    }, delay);
}
function completeAction() {
    executing = false;
    executeAction();
}
function executeAction() {
    if (actions.length > 0) {
        if (!executing) {
            executing = true;
            var action = actions.shift();
            switch (action.type) {
                case ActionType.Draw: {
                    draw(action.points);
                    break;
                }
                case ActionType.Shake: {
                    shakeAndReset(500 / speed, completeAction);
                    break;
                }
                case ActionType.Restart: {
                    shakeAndReset(10000 / speed, function () {
                        completeAction();
                        setTimeout(getTransactions, 500 / speed);
                    });
                    break;
                }
            }
        }
    }
}
var leftKnob = get('leftKnobCircle');
var rightKnob = get('rightKnobCircle');
var lx = base(leftKnob.cx);
var ly = base(leftKnob.cy);
var rx = base(rightKnob.cx);
var ry = base(rightKnob.cy);
function draw(points) {
    var ds = [];
    if (points.length <= 1) {
        completeAction();
        return;
    }
    var length = 0;
    points.forEach((function (_a, index) {
        var x = _a[0], y = _a[1];
        if (index > 0) {
            var _b = points[index - 1], px = _b[0], py = _b[1];
            var dx = x - px;
            var dy = y - py;
            var d = Math.sqrt(dx * dx + dy * dy) * sc;
            length += d;
            ds.push(d);
        }
    }));
    var polyline = create('polyline');
    setAttributes(polyline, [
        ['transform', "translate(" + (base(bounds.x) + cs) + ", " + (base(bounds.y) + cs) + ")"],
        ['stroke', 'white'],
        ['stroke-width', '2'],
        ['stroke-linecap', 'round'],
        ['stroke-linejoin', 'round'],
        ['points', points.map(function (_a) {
                var x = _a[0], y = _a[1];
                return x * sc + "," + y * sc;
            }).join(' ')]
    ]);
    setAttributes(polyline, [
        ['stroke-dasharray', length],
        ['stroke-dashoffset', length],
    ]);
    var start = null;
    var last = null;
    var index = 0;
    function rotate(knob, kx, ky, r) {
        knob.parentNode.setAttribute('transform', "rotate(" + r + " " + kx + " " + ky + ")");
    }
    function nextFrame(time) {
        time *= speed;
        if (!last)
            start = last = time;
        var d = ds[index];
        var dt = time - last;
        var _a = points[index], px = _a[0], py = _a[1];
        var _b = points[index + 1], cx = _b[0], cy = _b[1];
        var cd = clamp(dt / d);
        var R = 3.6;
        rotate(leftKnob, lx, ly, (px - (px - cx) * cd) * R);
        rotate(rightKnob, rx, ry, (py - (py - cy) * cd) * R);
        polyline.setAttribute('stroke-dashoffset', "" + (length - Math.min(time - start, length)));
        if (dt > d) {
            last = time;
            index++;
        }
        if (index < ds.length) {
            window.requestAnimationFrame(nextFrame);
        }
        else {
            completeAction();
        }
    }
    window.requestAnimationFrame(nextFrame);
    canvas.appendChild(polyline);
    segments.push(polyline);
}
function getTransactions() {
    transactions(fillActions, function (e) {
        console.log(e);
        console.log('Retrying in 30 seconds...');
        setTimeout(getTransactions, 30000);
    }, limit);
}
getTransactions();
]]></script>
</svg>